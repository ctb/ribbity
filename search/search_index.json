{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to sourmash-examples! Example 1 - downloading, sketching, and searching a collection of FASTA files Example 2 - creating and using an LCA database for taxonomic analysis Example 3 - using sourmash tax to classify a metagenome Example 4 - using picklists and manifests to work with a small subset of a large database Example 5 - searching collection manifests directly Example 6 - create a conda environment with the latest version of sourmash Example 7 - using genome_updater.sh and sketch fromfile to build a custom database","title":"Home"},{"location":"#welcome-to-sourmash-examples","text":"Example 1 - downloading, sketching, and searching a collection of FASTA files Example 2 - creating and using an LCA database for taxonomic analysis Example 3 - using sourmash tax to classify a metagenome Example 4 - using picklists and manifests to work with a small subset of a large database Example 5 - searching collection manifests directly Example 6 - create a conda environment with the latest version of sourmash Example 7 - using genome_updater.sh and sketch fromfile to build a custom database","title":"Welcome to sourmash-examples!"},{"location":"1-downloading-sketching-and-searching-a-collection-of-FASTA-files/","text":"Example 1: downloading, sketching, and searching a collection of FASTA files Download 64 genomes from Awad et al., 2017 : curl -L https://osf.io/download/vbhy5 -o podar-ref.tar.gz tar xzf podar-ref.tar.gz Sketch them all in DNA space using default parameters, using GNU parallel per https://github.com/sourmash-bio/sourmash/issues/1796: parallel -j 8 sourmash sketch dna {} -o {}.sig --name-from-first ::: $(ls *.fa) Build a search database from all the signature files for k=31: sourmash sig cat *.sig -k 31 -o podar-ref.zip Search the database with one of the Shewanella genomes: sourmash search 63.fa.sig podar-ref.zip and you should see: similarity match ---------- ----- similarity match ---------- ----- 100.0% NC_011663.1 Shewanella baltica OS223, complete genome 32.1% NC_009665.1 Shewanella baltica OS185, complete genome","title":"Example 1: downloading, sketching, and searching a collection of FASTA files"},{"location":"1-downloading-sketching-and-searching-a-collection-of-FASTA-files/#example-1-downloading-sketching-and-searching-a-collection-of-fasta-files","text":"Download 64 genomes from Awad et al., 2017 : curl -L https://osf.io/download/vbhy5 -o podar-ref.tar.gz tar xzf podar-ref.tar.gz Sketch them all in DNA space using default parameters, using GNU parallel per https://github.com/sourmash-bio/sourmash/issues/1796: parallel -j 8 sourmash sketch dna {} -o {}.sig --name-from-first ::: $(ls *.fa) Build a search database from all the signature files for k=31: sourmash sig cat *.sig -k 31 -o podar-ref.zip Search the database with one of the Shewanella genomes: sourmash search 63.fa.sig podar-ref.zip and you should see: similarity match ---------- ----- similarity match ---------- ----- 100.0% NC_011663.1 Shewanella baltica OS223, complete genome 32.1% NC_009665.1 Shewanella baltica OS185, complete genome","title":"Example 1: downloading, sketching, and searching a collection of FASTA files"},{"location":"2-creating-and-using-an-LCA-database-for-taxonomic-analysis/","text":"Example 2: creating and using an LCA database for taxonomic analysis First, download and sketch 64 genomes from Awad et al., 2017 using the instructions in Example 1: downloading, sketching, and searching a collection of FASTA files . You'll need podar-ref.zip . Next, you'll need podar-lineage.csv - curl -L https://osf.io/4yhjw/download -o podar-lineage.csv Now create an LCA database in SQL format: sourmash lca index podar-lineage.csv podar-ref.lca.sql podar-ref.zip \\ -F sql -C 3 --split-identifiers Extract one of the Shewanella genomes from podar-ref.zip using sourmash sig grep : sourmash sig grep OS223 podar-ref.zip -o shew-os223.sig and now you can classify genomes with lca classify : sourmash lca classify --query shew-os223.sig --db podar-ref.lca.sql and you should see it classified correctly: \"NC_011663.1 Shewanella baltica OS223, complete genome\",found,Bacteria,Proteobacteria,Gammaproteobacteria,Alteromonadales,Shewanellaceae,Shewanella,Shewanella baltica,Shewanella baltica OS223 You can use lca summarize to classify the genome as if it were a metagenome mixture, too: sourmash lca summarize --query shew-os223.sig --db podar-ref.lca.sql and you should see: 50.5% 278 Bacteria;Proteobacteria;Gammaproteobacteria;Alteromonadales;Shewanellaceae;Shewanella;Shewanella baltica;Shewanella baltica OS223 shew-os223.sig:38729c63 NC_011663.1 Shewanella baltica OS223, complete genome 100.0% 550 Bacteria;Proteobacteria;Gammaproteobacteria;Alteromonadales;Shewanellaceae;Shewanella;Shewanella baltica shew-os223.sig:38729c63 NC_011663.1 Shewanella baltica OS223, complete genome which indicates that about 50% of the content is not strain specific, and is shared with the other Shewanella in the collection.","title":"Example 2: creating and using an LCA database for taxonomic analysis"},{"location":"2-creating-and-using-an-LCA-database-for-taxonomic-analysis/#example-2-creating-and-using-an-lca-database-for-taxonomic-analysis","text":"First, download and sketch 64 genomes from Awad et al., 2017 using the instructions in Example 1: downloading, sketching, and searching a collection of FASTA files . You'll need podar-ref.zip . Next, you'll need podar-lineage.csv - curl -L https://osf.io/4yhjw/download -o podar-lineage.csv Now create an LCA database in SQL format: sourmash lca index podar-lineage.csv podar-ref.lca.sql podar-ref.zip \\ -F sql -C 3 --split-identifiers Extract one of the Shewanella genomes from podar-ref.zip using sourmash sig grep : sourmash sig grep OS223 podar-ref.zip -o shew-os223.sig and now you can classify genomes with lca classify : sourmash lca classify --query shew-os223.sig --db podar-ref.lca.sql and you should see it classified correctly: \"NC_011663.1 Shewanella baltica OS223, complete genome\",found,Bacteria,Proteobacteria,Gammaproteobacteria,Alteromonadales,Shewanellaceae,Shewanella,Shewanella baltica,Shewanella baltica OS223 You can use lca summarize to classify the genome as if it were a metagenome mixture, too: sourmash lca summarize --query shew-os223.sig --db podar-ref.lca.sql and you should see: 50.5% 278 Bacteria;Proteobacteria;Gammaproteobacteria;Alteromonadales;Shewanellaceae;Shewanella;Shewanella baltica;Shewanella baltica OS223 shew-os223.sig:38729c63 NC_011663.1 Shewanella baltica OS223, complete genome 100.0% 550 Bacteria;Proteobacteria;Gammaproteobacteria;Alteromonadales;Shewanellaceae;Shewanella;Shewanella baltica shew-os223.sig:38729c63 NC_011663.1 Shewanella baltica OS223, complete genome which indicates that about 50% of the content is not strain specific, and is shared with the other Shewanella in the collection.","title":"Example 2: creating and using an LCA database for taxonomic analysis"},{"location":"3-using-sourmash-tax-to-classify-a-metagenome/","text":"Example 3: using sourmash tax to classify a metagenome First, download and sketch 64 genomes from Awad et al., 2017 using the instructions in Example 1: downloading, sketching, and searching a collection of FASTA files . You'll need podar-ref.zip . Next, you'll need podar-lineage.csv - curl -L https://osf.io/4yhjw/download -o podar-lineage.csv Next we'll make a fake metagenome consisting of a signature created by merging two Shewanella baltica signatures. First, extract signatures with Shewanella in the name from podar-ref.zip : sourmash sig grep Shewanella podar-ref.zip -o shew-matches.sig Then, use sourmash sig merge to merge them into one signature: sourmash sig merge shew-matches.sig -o shew-merge.sig This is our fake metagenome that we'll use to demonstrate sourmash tax . Now that we've got our fake metagenome, run sourmash gather to find the minimum metagenome cover : sourmash gather shew-merge.sig podar-ref.zip -o out.csv and then run sourmash tax metagenome to classify this as a \"mixture\" using the matching genomes from out.csv and their taxonomy in podar-lineage.csv : sourmash tax -g out.csv -t podar-lineage.csv and you should see: ,genus,1.000,Bacteria;Proteobacteria;Gammaproteobacteria;Alteromonadales;Shewanellaceae;Shewanella,491c0a81,,1.000,7886000 ,species,1.000,Bacteria;Proteobacteria;Gammaproteobacteria;Alteromonadales;Shewanellaceae;Shewanella;Shewanella baltica,491c0a81,,1.000,7886000 which shows that this is 100% Shewanella, as, well expected :).","title":"Example 3: using `sourmash tax` to classify a metagenome"},{"location":"3-using-sourmash-tax-to-classify-a-metagenome/#example-3-using-sourmash-tax-to-classify-a-metagenome","text":"First, download and sketch 64 genomes from Awad et al., 2017 using the instructions in Example 1: downloading, sketching, and searching a collection of FASTA files . You'll need podar-ref.zip . Next, you'll need podar-lineage.csv - curl -L https://osf.io/4yhjw/download -o podar-lineage.csv Next we'll make a fake metagenome consisting of a signature created by merging two Shewanella baltica signatures. First, extract signatures with Shewanella in the name from podar-ref.zip : sourmash sig grep Shewanella podar-ref.zip -o shew-matches.sig Then, use sourmash sig merge to merge them into one signature: sourmash sig merge shew-matches.sig -o shew-merge.sig This is our fake metagenome that we'll use to demonstrate sourmash tax . Now that we've got our fake metagenome, run sourmash gather to find the minimum metagenome cover : sourmash gather shew-merge.sig podar-ref.zip -o out.csv and then run sourmash tax metagenome to classify this as a \"mixture\" using the matching genomes from out.csv and their taxonomy in podar-lineage.csv : sourmash tax -g out.csv -t podar-lineage.csv and you should see: ,genus,1.000,Bacteria;Proteobacteria;Gammaproteobacteria;Alteromonadales;Shewanellaceae;Shewanella,491c0a81,,1.000,7886000 ,species,1.000,Bacteria;Proteobacteria;Gammaproteobacteria;Alteromonadales;Shewanellaceae;Shewanella;Shewanella baltica,491c0a81,,1.000,7886000 which shows that this is 100% Shewanella, as, well expected :).","title":"Example 3: using sourmash tax to classify a metagenome"},{"location":"4-using-picklists-and-manifests-to-work-with-a-small-subset-of-a-large-database/","text":"Example 4: using picklists and manifests to work with a small subset of a large database Suppose you want to search, compare, or otherwise work with only a small set of genomes from GTDB - perhaps only the ones with \"Shewanella\" in their name. sourmash makes this easy! Start by downloading the GTDB genomic representatives database from the prepared databases . curl -JLO https://osf.io/3a6gn/download This will download a 1.7 GB file named gtdb-rs207.genomic-reps.dna.k31.zip . Extract a manifest Now extract a manifest containing all of the metadata about signatures in this zip file: sourmash sig manifest gtdb-rs207.genomic-reps.dna.k31.zip -o gtdb.mf --no-rebuild (Here, the --no-rebuild just uses the manifest included in the zip file, rather than regenerating it from scratch.) Use csvtk to extract the name column and then use grep to select only those with Shewanella in their name - csvtk cut -f name gtdb.mf | grep -i Shewanella > shew.names.csv You should see that you have 98 matches: wc -l shew.names.csv Make a picklist from the manifest row names Turn this list into a picklist file by providing a column header: echo name > shew-picklist.csv cat shew.names.csv >> shew-picklist.csv `` ## Get a query signature Run: ```shell sourmash sig grep GCA_002341165 gtdb-rs207.genomic-reps.dna.k31.zip -o shew-query.sig to pick out just one of the Shewanella signatures, to use as a search query. Search using the picklist Now you can search just the Shewanella genomes using the picklist: sourmash search shew-query.sig gtdb-rs207.genomic-reps.dna.k31.zip --picklist shew-picklist.csv:name:name This is much faster than searching the entire database (which contains 66k signatures) as long as you know you just want to search that specific list of Shewanella genomes. Note: You could use just the space-delimited identifiers as a picklist, too, by using ident as the column type in the argument to --picklist , above. Please see the picklist docs for details.","title":"Example 4: using picklists and manifests to work with a small subset of a large database"},{"location":"4-using-picklists-and-manifests-to-work-with-a-small-subset-of-a-large-database/#example-4-using-picklists-and-manifests-to-work-with-a-small-subset-of-a-large-database","text":"Suppose you want to search, compare, or otherwise work with only a small set of genomes from GTDB - perhaps only the ones with \"Shewanella\" in their name. sourmash makes this easy! Start by downloading the GTDB genomic representatives database from the prepared databases . curl -JLO https://osf.io/3a6gn/download This will download a 1.7 GB file named gtdb-rs207.genomic-reps.dna.k31.zip .","title":"Example 4: using picklists and manifests to work with a small subset of a large database"},{"location":"4-using-picklists-and-manifests-to-work-with-a-small-subset-of-a-large-database/#extract-a-manifest","text":"Now extract a manifest containing all of the metadata about signatures in this zip file: sourmash sig manifest gtdb-rs207.genomic-reps.dna.k31.zip -o gtdb.mf --no-rebuild (Here, the --no-rebuild just uses the manifest included in the zip file, rather than regenerating it from scratch.) Use csvtk to extract the name column and then use grep to select only those with Shewanella in their name - csvtk cut -f name gtdb.mf | grep -i Shewanella > shew.names.csv You should see that you have 98 matches: wc -l shew.names.csv","title":"Extract a manifest"},{"location":"4-using-picklists-and-manifests-to-work-with-a-small-subset-of-a-large-database/#make-a-picklist-from-the-manifest-row-names","text":"Turn this list into a picklist file by providing a column header: echo name > shew-picklist.csv cat shew.names.csv >> shew-picklist.csv `` ## Get a query signature Run: ```shell sourmash sig grep GCA_002341165 gtdb-rs207.genomic-reps.dna.k31.zip -o shew-query.sig to pick out just one of the Shewanella signatures, to use as a search query.","title":"Make a picklist from the manifest row names"},{"location":"4-using-picklists-and-manifests-to-work-with-a-small-subset-of-a-large-database/#search-using-the-picklist","text":"Now you can search just the Shewanella genomes using the picklist: sourmash search shew-query.sig gtdb-rs207.genomic-reps.dna.k31.zip --picklist shew-picklist.csv:name:name This is much faster than searching the entire database (which contains 66k signatures) as long as you know you just want to search that specific list of Shewanella genomes. Note: You could use just the space-delimited identifiers as a picklist, too, by using ident as the column type in the argument to --picklist , above. Please see the picklist docs for details.","title":"Search using the picklist"},{"location":"5-searching-collection-manifests-directly/","text":"Example 5: searching collection manifests directly This example follows from Example 4: using picklists and manifests to work with a small subset of a large database . In #4, we see how to use a picklist to search a small subset of GTDB. But we can make this even simpler. Build a manifest that you can search directly Specifying the picklist is cumbersome if you want to search this database repeatedly. sourmash also lets you build a collection manifest that contains pointers into the database, using sig check ( doc link ). To create the collection manifest, first make a \"pathlist\" file, a text file containing the paths of sourmash databases you want to work with. In this case, the file will only contain one pathname, the GTDB database. ls gtdb-rs207.genomic-reps.dna.k31.zip > pathlist.txt Then, run: sourmash sig check --picklist shew-picklist.csv:name:name \\ pathlist.txt --save-manifest shew-mf.csv which will create a manifest in shew-mf.csv for all the entries that match the given picklist. You can now search this manifest file directly: sourmash search shew-query.sig shew-mf.csv","title":"Example 5: searching collection manifests directly"},{"location":"5-searching-collection-manifests-directly/#example-5-searching-collection-manifests-directly","text":"This example follows from Example 4: using picklists and manifests to work with a small subset of a large database . In #4, we see how to use a picklist to search a small subset of GTDB. But we can make this even simpler.","title":"Example 5: searching collection manifests directly"},{"location":"5-searching-collection-manifests-directly/#build-a-manifest-that-you-can-search-directly","text":"Specifying the picklist is cumbersome if you want to search this database repeatedly. sourmash also lets you build a collection manifest that contains pointers into the database, using sig check ( doc link ). To create the collection manifest, first make a \"pathlist\" file, a text file containing the paths of sourmash databases you want to work with. In this case, the file will only contain one pathname, the GTDB database. ls gtdb-rs207.genomic-reps.dna.k31.zip > pathlist.txt Then, run: sourmash sig check --picklist shew-picklist.csv:name:name \\ pathlist.txt --save-manifest shew-mf.csv which will create a manifest in shew-mf.csv for all the entries that match the given picklist. You can now search this manifest file directly: sourmash search shew-query.sig shew-mf.csv","title":"Build a manifest that you can search directly"},{"location":"6-create-a-conda-environment-with-the-latest-version-of-sourmash/","text":"Example 6: create a conda environment with the latest version of sourmash Per @bluegenes tested by @jessicalumian. Create a file sourmash-latest.yml containing the dependencies, plus a pointer to the latest version of sourmash: channels: - conda-forge - bioconda - defaults dependencies: - python=3.9 - rust - pip - pip: - git+https://github.com/sourmash-bio/sourmash@latest and then run: conda env create -n sourmash-latest -f sourmash-latest.yml Wait for it to build (~5 min?) and then conda activate sourmash-latest and then run: sourmash info","title":"Example 6: create a conda environment with the latest version of sourmash"},{"location":"6-create-a-conda-environment-with-the-latest-version-of-sourmash/#example-6-create-a-conda-environment-with-the-latest-version-of-sourmash","text":"Per @bluegenes tested by @jessicalumian. Create a file sourmash-latest.yml containing the dependencies, plus a pointer to the latest version of sourmash: channels: - conda-forge - bioconda - defaults dependencies: - python=3.9 - rust - pip - pip: - git+https://github.com/sourmash-bio/sourmash@latest and then run: conda env create -n sourmash-latest -f sourmash-latest.yml Wait for it to build (~5 min?) and then conda activate sourmash-latest and then run: sourmash info","title":"Example 6: create a conda environment with the latest version of sourmash"},{"location":"7-using-genomeupdater.sh-and-sketch-fromfile-to-build-a-custom-database/","text":"Example 7: using genome_updater.sh and sketch fromfile to build a custom database I wanted to build a database with custom k-size values containing all genomes under taxid Shewanella . First, I installed https://github.com/pirovc/genome_updater: mamba install -y genome_updater Then I ran: genome_updater.sh -T 22 -d \"genbank\" -f \"genomic.fna.gz\" -o shew -t 6 which produced shew/2022-05-06_13-58-43/ . Next, I ran: ../database-examples/genbank-to-fromfile.py shew/2022-05-06_13-58-43/files/GCA_* \\ -S shew/2022-05-06_13-58-43/assembly_summary.txt -o shewanella.csv (using a checkout of https://github.com/sourmash-bio/database-examples at this release .) This resulted in the following output: Loaded 439 rows from 'shew/2022-05-06_13-58-43/assembly_summary.txt' Any survivable errors will be reported to 'shewanella.csv.error-report.txt' processing file 'GCA_000712635.2_SXM1.0_for_version_1_of_the_Shewanella_xiamenenprocessing file 'GCA_000947195.1_Shewanella_algae_MARS_14_genomic.fna.gz' (42/43processing file 'GCA_900079515.1_Shewanella_sp.Alg231_23_genomic.fna.gz' (426/43processing file 'GCA_900156405.1_IMG-taxon_2681812898_annotated_assembly_genomicprocessing file 'GCA_913058445.1_SRR3933262_bin.2_MetaBAT_v2.12.1_MAG_genomic.fnprocessed 439 files. --- wrote 439 entries to 'shewanella.csv' 439 entries had only protein (and no genome) files. Using this, I could then run sourmash sketch fromfile shewanella.csv -p <my parameters here> ...","title":"Example 7: using `genome_updater.sh` and `sketch fromfile` to build a custom database"},{"location":"7-using-genomeupdater.sh-and-sketch-fromfile-to-build-a-custom-database/#example-7-using-genome_updatersh-and-sketch-fromfile-to-build-a-custom-database","text":"I wanted to build a database with custom k-size values containing all genomes under taxid Shewanella . First, I installed https://github.com/pirovc/genome_updater: mamba install -y genome_updater Then I ran: genome_updater.sh -T 22 -d \"genbank\" -f \"genomic.fna.gz\" -o shew -t 6 which produced shew/2022-05-06_13-58-43/ . Next, I ran: ../database-examples/genbank-to-fromfile.py shew/2022-05-06_13-58-43/files/GCA_* \\ -S shew/2022-05-06_13-58-43/assembly_summary.txt -o shewanella.csv (using a checkout of https://github.com/sourmash-bio/database-examples at this release .) This resulted in the following output: Loaded 439 rows from 'shew/2022-05-06_13-58-43/assembly_summary.txt' Any survivable errors will be reported to 'shewanella.csv.error-report.txt' processing file 'GCA_000712635.2_SXM1.0_for_version_1_of_the_Shewanella_xiamenenprocessing file 'GCA_000947195.1_Shewanella_algae_MARS_14_genomic.fna.gz' (42/43processing file 'GCA_900079515.1_Shewanella_sp.Alg231_23_genomic.fna.gz' (426/43processing file 'GCA_900156405.1_IMG-taxon_2681812898_annotated_assembly_genomicprocessing file 'GCA_913058445.1_SRR3933262_bin.2_MetaBAT_v2.12.1_MAG_genomic.fnprocessed 439 files. --- wrote 439 entries to 'shewanella.csv' 439 entries had only protein (and no genome) files. Using this, I could then run sourmash sketch fromfile shewanella.csv -p <my parameters here> ...","title":"Example 7: using genome_updater.sh and sketch fromfile to build a custom database"},{"location":"l-advanced/","text":"advanced Example 6 - create a conda environment with the latest version of sourmash Example 5 - searching collection manifests directly","title":"advanced"},{"location":"l-advanced/#advanced","text":"Example 6 - create a conda environment with the latest version of sourmash Example 5 - searching collection manifests directly","title":"advanced"},{"location":"l-databases/","text":"databases Example 7 - using genome_updater.sh and sketch fromfile to build a custom database","title":"databases"},{"location":"l-databases/#databases","text":"Example 7 - using genome_updater.sh and sketch fromfile to build a custom database","title":"databases"},{"location":"l-developer/","text":"developer Example 6 - create a conda environment with the latest version of sourmash","title":"developer"},{"location":"l-developer/#developer","text":"Example 6 - create a conda environment with the latest version of sourmash","title":"developer"},{"location":"l-fasta/","text":"fasta Example 1 - downloading, sketching, and searching a collection of FASTA files","title":"fasta"},{"location":"l-fasta/#fasta","text":"Example 1 - downloading, sketching, and searching a collection of FASTA files","title":"fasta"},{"location":"l-gtdb-rs207/","text":"gtdb-rs207 Example 4 - using picklists and manifests to work with a small subset of a large database","title":"gtdb-rs207"},{"location":"l-gtdb-rs207/#gtdb-rs207","text":"Example 4 - using picklists and manifests to work with a small subset of a large database","title":"gtdb-rs207"},{"location":"l-intermediate/","text":"intermediate Example 4 - using picklists and manifests to work with a small subset of a large database","title":"intermediate"},{"location":"l-intermediate/#intermediate","text":"Example 4 - using picklists and manifests to work with a small subset of a large database","title":"intermediate"},{"location":"l-manifests/","text":"manifests Example 5 - searching collection manifests directly","title":"manifests"},{"location":"l-manifests/#manifests","text":"Example 5 - searching collection manifests directly","title":"manifests"},{"location":"l-needs-improvement/","text":"needs-improvement Example 5 - searching collection manifests directly","title":"needs-improvement"},{"location":"l-needs-improvement/#needs-improvement","text":"Example 5 - searching collection manifests directly","title":"needs-improvement"},{"location":"l-sourmash-v4.0/","text":"sourmash-v4.0 Example 1 - downloading, sketching, and searching a collection of FASTA files","title":"sourmash-v4.0"},{"location":"l-sourmash-v4.0/#sourmash-v40","text":"Example 1 - downloading, sketching, and searching a collection of FASTA files","title":"sourmash-v4.0"},{"location":"l-sourmash-v4.2/","text":"sourmash-v4.2 Example 3 - using sourmash tax to classify a metagenome","title":"sourmash-v4.2"},{"location":"l-sourmash-v4.2/#sourmash-v42","text":"Example 3 - using sourmash tax to classify a metagenome","title":"sourmash-v4.2"},{"location":"l-sourmash-v4.4/","text":"sourmash-v4.4 Example 2 - creating and using an LCA database for taxonomic analysis","title":"sourmash-v4.4"},{"location":"l-sourmash-v4.4/#sourmash-v44","text":"Example 2 - creating and using an LCA database for taxonomic analysis","title":"sourmash-v4.4"},{"location":"l-taxonomy/","text":"taxonomy Example 3 - using sourmash tax to classify a metagenome Example 2 - creating and using an LCA database for taxonomic analysis","title":"taxonomy"},{"location":"l-taxonomy/#taxonomy","text":"Example 3 - using sourmash tax to classify a metagenome Example 2 - creating and using an LCA database for taxonomic analysis","title":"taxonomy"}]}